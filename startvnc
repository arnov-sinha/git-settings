#!/bin/bash -p
# Startup in home directory
cd $HOME

# Ensure safe permissions:
umask 077

# Create vnc directory if it doesn't exist already:
mkdir -p $HOME/.vnc 2>/dev/null || true

# Save output to log in .vnc directory
exec 1> >(tee $HOME/.vnc/startvnc.log) 2>&1

max_tries=$(( \
   $(who | wc -l) + \
   $(ps wwwaux | egrep '[v]nc' | wc -l) + \
   $(ls -1 /tmp/.X*-lock /tmp/.X11-unix/X* 2>/dev/null | wc -l) + 10))

default_geom="1910x1150"	# big widescreen, but not fullscreen

# default_geom="1152x864"	# small widescreen
# default_geom="1280x1024"	# small standard
# default_geom="1900x1100"	# big widescreen
# default_geom="1660x950"	# (fit on 1680x1050 -- subtract 20 for width, 100 for height)
# default_geom="1920x1200"	# big widescreen, for 'vncviewer -FullScreen' usage

usage () {
   cat <<EOF
Usage:  startvnc [geometry]
        Geometry can also be specified using VNCGEOMETRY environment variable.

        Geometry format:  ####x####

        Default geometry = $default_geom
        Default max_tries = $max_tries
EOF
      exit 1
}


: ${VNCGEOMETRY:="$default_geom"}

# Simple positional argument parsing:
case $# in
   1)
      case "$1" in
         *[0-9]x[0-9]*)
            VNCGEOMETRY="$1"
            ;;
         -h|--help)
            usage
            ;;
         *)
            usage
            ;;
      esac
      ;;
   0)
      true
      ;;
   *)
      usage
      ;;
esac

# Check whether this user has any vnc sessions running first:
echo ""
ps wwwaux | egrep 'X[v]nc' | grep "^$USER" && {
    printf "\n\t*** You currently have another VNC session running already.\n"
    printf "\n\t*** The system admins recommend that you use your pre-existing session"
    printf "\n\t*** or halt it and start a new one.\n"
    printf "\n\t*** Do you still want to continue starting a new VNC session?\n"
    printf "\n\t\tEnter 'y' to continue or anything else to quit:  [y/N] ==> "
    read response
    case "x$response" in
        x[Yy]*)
            true
            ;;
        *)
            echo ""
            echo "To halt your current vnc session, note your existing desktop's"
            echo "ID from the output above (it should look like a digit after a"
            echo "colon), then issue the command"
            printf "\n\n\tvncserver -kill :<ID>\n\n"
            exit 1
            ;;
    esac
} || true

# Now start working ...
unset DISPLAY
unset XAUTHORITY
unset SESSION_MANAGER
unset DBUS_SESSION_BUS_ADDRESS

echo "startvnc attempts to find a DISPLAY id between 1 and $max_tries that isn't"
echo "being used, and will then start vncserver using that ID."

# Find the first session ID that isn't being used.
for ((i=1; i <= max_tries; i++)) ; do
   vncserver :$i -geometry $VNCGEOMETRY -depth 24 -nolisten local && break
done 1> $HOME/.vnc/max_tries.log 2>&1

sleep 1
echo "VNC sessions now running on this host:"
ps wwwaux | egrep '^[U]SER|[X]vnc'
echo ""
echo "Please verify that no one else is running with your DISPLAY id."
echo ""
echo "X session lock files:"
ls -lrt /tmp/.X*-lock /tmp/.X11-unix/X*
echo ""
echo "If you see lock files for non-existent sessions, please notify"
echo "the user."

echo "*** NOTE ***"
echo "Startvnc output above has been duplicated to $HOME/.vnc/startvnc.log."
echo "Vncserver attempts saved in $HOME/.vnc/max_tries.log"
echo "************"

if ((i > max_tries)) ; then
   echo ""
   echo "*** Startvnc UNSUCCESSFUL ***"
   echo "ERROR:  too many vnc sessions on `hostname`."
   echo "Try another server."
   exit 1
else
   echo "*** Startvnc SUCCESSFUL ***"
   echo "Vncserver session started on display :${i}.0"
fi
